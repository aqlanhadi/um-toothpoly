{"version":3,"sources":["services/socket.js","components/playground.js","App.js","serviceWorker.js","index.js"],"names":["socket","io","process","HOST","PORT","transports","Playground","props","state","roomCode","counter","playerName","players","handleChange","bind","handleJoinGame","handleNewGame","handleClick","handleUpdateCounter","handleInit","handleGameCode","handleUpdatePlayerList","on","this","event","setState","target","name","value","player","console","log","code","emit","preventDefault","tet","PL","onClick","onSubmit","type","onChange","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yOAEaA,E,MAASC,GAAG,QAAD,OAAUC,mIAAYC,MAAQ,YAA9B,YAA+CD,mIAAYE,MAAQ,QAAW,CAAEC,WAAa,CAAC,e,OCCjGC,E,kDACjB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAEDC,MAAQ,CACTC,SAAU,GACVC,QAAS,EACTC,WAAY,GACZC,QAAS,IAIb,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,eAAiB,EAAKA,eAAeD,KAApB,gBACtB,EAAKE,cAAgB,EAAKA,cAAcF,KAAnB,gBAErB,EAAKG,YAAc,EAAKA,YAAYH,KAAjB,gBAEnB,EAAKI,oBAAsB,EAAKA,oBAAoBJ,KAAzB,gBAC3B,EAAKK,WAAa,EAAKA,WAAWL,KAAhB,gBAClB,EAAKM,eAAiB,EAAKA,eAAeN,KAApB,gBACtB,EAAKO,uBAAyB,EAAKA,uBAAuBP,KAA5B,gBApBf,E,qDAwBnB,WACId,EAAOsB,GAAG,gBAAiBC,KAAKL,qBAChClB,EAAOsB,GAAG,OAAQC,KAAKJ,YACvBnB,EAAOsB,GAAG,WAAYC,KAAKH,gBAC3BpB,EAAOsB,GAAG,mBAAoBC,KAAKF,0B,0BAIvC,SAAaG,GAETD,KAAKE,SAAL,2BACOF,KAAKf,OADZ,kBAEKgB,EAAME,OAAOC,KAAOH,EAAME,OAAOE,W,wBAI1C,SAAWC,GACPC,QAAQC,IAAI,UAAYF,EAAS,wB,4BAGrC,SAAeG,GACXF,QAAQC,IAAI,WAAaC,GACzBT,KAAKE,SAAS,CAAChB,SAAUuB,M,4BAG7B,SAAeR,GAEXD,KAAKhB,MAAMP,OAAOiC,KAAK,WAAYV,KAAKf,OACxCgB,EAAMU,mB,2BAGV,SAAcV,GACVD,KAAKhB,MAAMP,OAAOiC,KAAK,WACvBT,EAAMU,mB,yBAGV,SAAYV,GACRM,QAAQC,IAAI,WACZR,KAAKhB,MAAMP,OAAOiC,KAAK,WACvBT,EAAMU,mB,iCAGV,SAAoBC,GAChBL,QAAQC,IAAI,YAAcI,GAC1BZ,KAAKE,SAAS,CAACf,QAASyB,M,oCAG5B,SAAuBC,GACnBN,QAAQC,IAAI,YAAYK,GACxBb,KAAKE,SAAS,CAACb,QAASwB,M,oBAE5B,WACI,OACI,gCACI,wBAAQC,QAASd,KAAKP,cAAtB,sBACA,0BAEA,uBAAMsB,SAAUf,KAAKR,eAArB,UACI,0CAEA,uBAAOwB,KAAK,OAAOZ,KAAK,WAAWC,MAAOL,KAAKf,MAAMC,SAAU+B,SAAUjB,KAAKV,kBAE9E,0CAEA,uBAAO0B,KAAK,OAAOZ,KAAK,aAAaC,MAAOL,KAAKf,MAAMG,WAAY6B,SAAUjB,KAAKV,kBAElF,uBAAO0B,KAAK,SAASX,MAAM,WAE/B,yBAAQS,QAASd,KAAKN,YAAtB,sBAA6CM,KAAKf,MAAME,WACxD,0CAAaa,KAAKf,MAAMI,kB,GA9FA6B,IAAMC,WCa/BC,MAVf,WAEE,OACE,8BACE,cAAC,EAAD,CAAY3C,OAAQA,OCEN4C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/B,QAAQ+B,MAAMA,EAAMC,c","file":"static/js/main.c91a3d35.chunk.js","sourcesContent":["import io from 'socket.io-client'\n\nexport const socket = io(`ws://${ process.env.HOST || \"localhost\" }:${ process.env.PORT || \"5000\" }`, { transports : ['websocket'] })","import React from 'react'\nimport { socket } from '../services/socket';\n\nexport default class Playground extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            roomCode: '',\n            counter: 0,\n            playerName: '',\n            players: ''\n        };\n        //functional components\n        \n        this.handleChange = this.handleChange.bind(this)\n        this.handleJoinGame = this.handleJoinGame.bind(this)\n        this.handleNewGame = this.handleNewGame.bind(this)\n        \n        this.handleClick = this.handleClick.bind(this)\n\n        this.handleUpdateCounter = this.handleUpdateCounter.bind(this)\n        this.handleInit = this.handleInit.bind(this) \n        this.handleGameCode = this.handleGameCode.bind(this)\n        this.handleUpdatePlayerList = this.handleUpdatePlayerList.bind(this)\n\n    }\n\n    componentDidMount() {\n        socket.on('updateCounter', this.handleUpdateCounter)\n        socket.on('init', this.handleInit)\n        socket.on('gameCode', this.handleGameCode)\n        socket.on('updatePlayerList', this.handleUpdatePlayerList)\n        \n    }\n\n    handleChange(event) {\n        //the form now accepts two values (roomCode, playerName)\n        this.setState({\n            ...this.state,\n            [event.target.name]: event.target.value\n        });\n    }\n\n    handleInit(player) {\n        console.log('player ' + player + ' connected to room')\n    }\n\n    handleGameCode(code) {\n        console.log('code is ' + code)\n        this.setState({roomCode: code})\n    }\n\n    handleJoinGame(event) {\n        //alert('A name was submitted: ' + this.state.value);\n        this.props.socket.emit('joinGame', this.state)\n        event.preventDefault();\n    }\n\n    handleNewGame(event) {\n        this.props.socket.emit('newGame')\n        event.preventDefault();\n    }\n\n    handleClick(event) {\n        console.log('clicked')\n        this.props.socket.emit('counter')\n        event.preventDefault()\n    }\n\n    handleUpdateCounter(tet) {\n        console.log('received ' + tet)\n        this.setState({counter: tet})\n    }\n\n    handleUpdatePlayerList(PL) {\n        console.log('received '+PL)\n        this.setState({players: PL})\n    }\n    render() {\n        return (\n            <div>\n                <button onClick={this.handleNewGame}>New Game</button>\n                <label></label>\n                {/* Form has two inputs now; player ingame-name and room code*/ }\n                <form onSubmit={this.handleJoinGame}>\n                    <label>\n                    Room:\n                    <input type=\"text\" name=\"roomCode\" value={this.state.roomCode} onChange={this.handleChange} />\n                    </label>\n                    <label>\n                    Name:\n                    <input type=\"text\" name=\"playerName\" value={this.state.playerName} onChange={this.handleChange} />\n                    </label>\n                    <input type=\"submit\" value=\"go!\" />\n                </form>\n                <button onClick={this.handleClick}>Counter: {this.state.counter}</button>\n                <p>Players: {this.state.players}</p>\n            </div>\n        );\n    }\n}","import React, {useState, useEffect} from 'react';\nimport Playground from './components/playground'\nimport Lobby from './components/lobby';\n\nimport { socket } from './services/socket.js'\n\nfunction App() {\n\n  return (\n    <div>\n      <Playground socket={socket}/>\n      {/* <Lobby socket={socket}/> */}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}