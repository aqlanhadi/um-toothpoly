{"version":3,"file":"static/js/106.1e4c30f3.chunk.js","mappings":"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","sources":["features/game/components/Tutorial.js","features/game/components/WaitForPlayers.js","features/game/components/Stage.js","features/game/components/Side.js","context/mounted.js","features/game/components/Question.js","features/game/components/GameOver.js","features/game/index.js"],"sourcesContent":["import { SocketContext } from \"../../../context/socket\"\nimport { useEffect, useContext } from \"react\"\n\nconst Tutorial = ({children}) => {\n    const socket = useContext(SocketContext)\n\n    useEffect(() => {\n    }, [])\n\n    const handleCompletedTutorial = () => {\n        socket.emit(\"game:set\", {\n            event: 'GAME_PLAYER_READY'\n        })\n    }\n\n    return (\n        <div className=\"absolute z-50 flex flex-col w-5/6 bg-slate-900 rounded-none border-8 border-white -translate-x-1/2 -translate-y-1/2 top-1/2 left-1/2 p-8 gap-4\">\n            <div className=\"p-4\">\n                <h1 className=\"text-white text-center text-4xl font-jakarta\">How to play</h1>\n            </div>\n            <div className=\"flex flex-1 gap-2 justify-evenly\">\n                <div className=\"flex flex-col gap-8 w-1/3\">\n                    <img src=\"/tut1-pic.png\" className=\"bg-slate-500 aspect-square outline-dashed outline-offset-4 outline-white rounded-lg\" alt=\"Click on Roll! to move your piece\" />\n                    <div className=\"font-jakarta text-white text-center text-xl\">Click on Roll! to move your piece</div>\n                </div>\n                <div className=\"flex flex-col gap-8 w-1/3\">\n                    <img src=\"/tut2-pic.png\" className=\"bg-slate-500 aspect-square outline-dashed outline-offset-4 outline-white rounded-lg\" alt=\"Answer the question before the time runs out!\" />\n                    <div className=\"font-jakarta text-white text-center text-xl\">Answer the question before the time runs out!</div>\n                </div>\n            </div>\n            <div className=\"bg-green-700 w-fit m-auto px-12 py-4 mt-6 rounded-xl text-2xl font-bold text-white font-jakarta cursor-pointer hover:scale-110\" onClick={handleCompletedTutorial}>\n                Lets play!\n            </div>\n        </div>\n    )\n}\n\nexport default Tutorial","const WaitForPlayers = () => {    \n\n    return (\n        <div className=\"absolute z-40 flex flex-col border-8 bg-white items-center justify-center border-black -translate-x-1/2 -translate-y-1/2 top-1/2 left-1/2\">\n            <div className=\"flex gap-4 p-8 \">\n                <div>\n                    <svg role=\"status\" className=\"w-9 h-9 mr-2 text-gray-200 animate-spin fill-slate-600\" viewBox=\"0 0 100 101\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <path d=\"M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z\" fill=\"currentColor\"/>\n                        <path d=\"M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z\" fill=\"currentFill\"/>\n                    </svg>\n                </div>\n                <div>\n                    <h1 className=\"text-slate-800 text-center text-3xl font-jakarta font-black\">Waiting for others...</h1>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default WaitForPlayers","import { useSelector } from \"react-redux\"\nimport Piece from \"./Piece\"\nimport { motion } from \"framer-motion\"\nimport { socket } from \"../../../context/socket\"\nimport { useDispatch } from \"react-redux\"\nimport { gameIsAnimating } from \"../gameSlice\"\n\nconst Board = () => {\n\n    const dispatch = useDispatch()\n    const players = useSelector((state) => state.game.players)   \n\n    const myTurn = useSelector((state) => state.game.players[state.game.turn]._id === state.session.id)\n\n    const gameDisabled = useSelector((state) => state.game.disable)\n\n    return(\n        <div className=\"relative flex-1 p-5 board\">\n                \n            <div className=\"relative w-full h-full\">\n                {/* \n                    There was a bug here wherein the piece would move automatically.\n                    CAUSE: when player presses correct, turn is already changed while player is moving to rewarded position. \n                    onAnimationCOmpleted is triggered\n                    SOLUTION: added gameIsAnimating state as a condition to prevent this.\n                */}\n                {\n                    players.map((player, i) =>\n                            <motion.div className={`\n                                absolute\n                                -translate-x-1/2\n                                translate-y-1/2\n                                \n                            `}\n                                key={`player-${i}`}\n                                animate={player.motion}\n                                // transition={{ delay: .75, duration: player.motion.left.length * 0.20 }}\n                                initial={false}\n                                onAnimationComplete={() => {\n                                    \n                                    dispatch(gameIsAnimating(false))\n                                    if(myTurn && gameDisabled) socket.emit('game:set', { event: 'GAME_MOVE_COMPLETED' })\n                                    \n                                    // if (isSupposedToClearMotion) {\n                                    //     \n                                    //     dispatch(gameResetPlayerMotion())\n                                    //     dispatch(gameToggleClearMotion())\n                                    // } else {\n                                    //     \n                                    // }\n                                \n\n                                }}\n                                onAnimationStart={() => {\n                                    dispatch(gameIsAnimating(true))\n                                }}\n                            >\n                                <div className=\"relative scale-50 md:scale-100\">\n                                    <Piece key={i} slot={player.slot} showInGameElements={true} shift={true} />\n                                </div>\n                            </motion.div>\n                    )\n                }\n            </div>\n        </div>\n    )\n}\n\nexport default Board","import { useContext, useEffect, forwardRef } from \"react\"\nimport { SocketContext } from \"../../../context/socket\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { useAnimation } from \"framer-motion\" \nimport { useMounted } from \"../../../context/mounted\"\nimport { gameSetMoving, gameIsAnimating } from \"../gameSlice\"\nimport ReactDice from 'react-dice-complete'\nimport './dice.css'\nimport Piece from \"./Piece\"\n\nimport { MdOutlineDoNotDisturbAlt } from \"react-icons/md\"\n\nconst Side = forwardRef((props, ref) => {\n\n    const mounted = useMounted()\n    const dispatch = useDispatch()\n    const socket = useContext(SocketContext)\n    const animDiceControls = useAnimation()\n    const rolled = useSelector(state => state.game.events.rolled)\n    const gameDisabled = useSelector((state) => state.game.disable)\n    const isAnimating = useSelector((state) => state.game.isAnimating)\n\n    const players = useSelector((state) => state.game.players)\n    const turn = useSelector((state) => state.game.turn)\n\n    //let dice = useRef(null)\n\n    // const me = useSelector((state) => state.game.players?.find((player) => player._id === socket.id))\n    // const turn = useSelector(state => state.game.turn)\n    // const myTurn = turn === me.number\n    \n    const myTurn = useSelector((state) => state.game.players[state.game.turn]._id === state.session.id)\n\n    const disableRoll = !(!gameDisabled && myTurn && !isAnimating)\n    const currentPosition = useSelector((state) => state.game.players[state.game.turn].position)\n\n    const onPodium = [...players]?.filter(p => p.is_winner).sort((a, b) => b.podium - a.podium)\n    const ranking = [...players]?.filter(p => !p.is_winner).sort((a, b) => b.position - a.position)\n\n    const ranked =[...onPodium, ...ranking]\n    const myId = useSelector((state) => state.session.id)\n\n\n    useEffect(() => {\n\n        // \n        if (!mounted()) return\n\n        animDiceControls.start({\n            rotate: [0, 360],\n        })\n\n    }, [rolled])\n\n    useEffect(() => {\n        \n        ranked?.forEach((player, i) => {\n            if (player._id === myId) {\n                \n            }\n        })\n        // \n    }, [])\n\n    const roll = async () => {\n\n        dispatch(gameSetMoving())\n        dispatch(gameIsAnimating(true))\n        \n\n        let roll = Math.floor(Math.random() * 6) + 1\n        let validRoll\n        if (currentPosition === 97 && roll === 6) {\n            validRoll = [1, 2, 3, 4, 5]\n            roll = validRoll[Math.floor(Math.random() * validRoll.length)]\n        }\n        if (currentPosition === 98 && roll === 4) {\n            validRoll = [1, 2, 3, 5, 6]\n            roll = validRoll[Math.floor(Math.random() * validRoll.length)]\n        }\n        if (currentPosition === 99 && roll === 2) {\n            validRoll = [1, 3, 4, 5, 6]\n            roll = validRoll[Math.floor(Math.random() * validRoll.length)]\n            roll = 3\n        }\n        // send roll to server\n\n        socket.emit('game:set', {\n            event: 'GAME_DICE_ROLLED',\n            payload: roll\n        })\n\n\n    }\n\n    const sup = ['st', 'nd', 'rd', 'th']\n\n    return(\n        <div className=\"flex md:flex-col gap-4 ml-4 p-8\">\n            <div className=\"flex-1 font-jakarta scale-90 md:scale-100\">\n                <p className=\"font-bold\">Standings</p>\n                <div className=\"flex flex-col items-center gap-y-4 mt-8\">    \n                {\n                    ranked.map((player, i) => {\n                        return(\n                            <div key={i} className={`flex w-full items-center`}>\n\n                                <div className=\"w-8\">\n                                    {i+1}<sup>{sup[i]}</sup>\n                                </div>\n\n                                <div className={`${i === 0 && 'scale-125'} px-4`}>\n                                    <Piece slot={player.slot} key={player._id}/>\n                                </div>\n\n                                <div className=\"text-xl\">\n                                    { player._id === myId &&\n                                        <div className=\"font-bold text-green-800\">\n                                            Me\n                                        </div>\n                                    }\n                                    {\n                                        player._id !== myId &&\n                                        <div className=\"text-slate-500\">\n                                            {player.name}\n                                        </div>\n                                    }\n                                </div>\n\n                                {/* <div className=\"text-sm font-bold\">{player.name}</div>\n                                <div className=\"text-sm\">{player.position}</div> */}\n                            </div>\n                        )\n                    })\n                }\n                </div>\n            </div>\n\n            <div className=\"flex flex-col scale-75 md:scale-100\">\n                <div className=\"flex items-center\">\n                    <div className=\"flex-1 font-jakarta text-2xl\">\n                        { myTurn ? \n                            <div className=\"font-bold text-green-700 text-center\">\n                                Your turn!\n                            </div>\n                        : \n                            <div className=\"text-slate-500 text-center\">\n                            {players[turn].name}'s turn\n                            </div>\n                            }\n                    </div>\n                </div>\n                \n                <div className=\"flex m-auto pointer-events-none\">\n                    \n                    <ReactDice\n                        numDice={1}\n                        ref={ref}\n                        faceColor={'#f9f9f9'}\n                        outline={true}\n                        dotColor={'#000'}\n                    />\n\n                </div>\n\n                {/* <div className=\"flex\">Disabled ? {String(disableRoll)}</div> */}\n\n                <div \n                    disabled={disableRoll}\n                    className={`${disableRoll ? 'cursor-not-allowed' : 'cursor-pointer'} disabled:scale-0 relative flex w-24 h-24 bg-slate-100 border-4 border-black rounded-3xl items-center justify-center m-auto font-kalam font-black text-2xl`}\n                    onClick={() => {\n                        if (disableRoll) return\n                        //rollTo(100)\n                        roll()\n                        \n                    }}\n                    >\n                    Roll!\n                    {   disableRoll &&\n                        <div className=\"absolute flex -translate-x-1/2 left-1/2 text-8xl text-red-600\">\n                            <p><MdOutlineDoNotDisturbAlt /></p>\n                        </div>\n                    }\n                </div>            \n            </div>\n        </div>\n    )\n})\n\nexport default Side","import { useRef, useEffect } from \"react\"\n\nexport const useMounted = () => {\n    const mounted = useRef(false)\n  \n    useEffect(() => {\n      mounted.current = true\n      return () => {\n        mounted.current = false\n      }\n    }, [])\n  \n    return () => mounted.current\n  }","import { useSelector } from \"react-redux\"\nimport { SocketContext } from \"../../../context/socket\"\nimport { useEffect, useContext } from \"react\"\nimport { motion } from \"framer-motion\"\n\nimport { CountdownCircleTimer } from \"react-countdown-circle-timer\"\n\nconst renderTime = ({remainingTime}) => (\n    <div className=\"text-white font-medium text-xl\">\n        {\n            remainingTime === 0 ? '' : remainingTime\n        }\n    </div>\n)\n\nconst Question = ({question, animate}) => {\n\n    // question = {\n    //     \"image_path\": null,\n    //     \"en\": {\n    //         \"question\": \"Toothpaste should be placed in large quantities on the entire surface of the toothbrush to ensure its effectiveness.\",\n    //         \"answers\": [\n    //             { \"value\": \"True\", \"correct\": false },\n    //             { \"value\": \"False\", \"correct\": true }\n    //         ]        \n    //     },\n    //     \"my\": {\n    //         \"question\": \"Ubat gigi perlu diletakkan dengan banyak di keseluruhan permukaan berus gigi untuk memastikan keberkesanannya.\",\n    //         \"answers\": [\n    //             { \"value\": \"Betul\", \"correct\": false },\n    //             { \"value\": \"Salah\", \"correct\": true }\n    //         ]\n            \n    //     }\n    // }\n\n    const timerId = useSelector((state) => state.game.timerId)\n    const inQuestion = useSelector((state) => state.game.inQuestion)\n    const myTurn = useSelector((state) => state.game.players[state.game.turn]._id === state.session.id)\n    const whosTurn = useSelector((state) => state.game.players[state.game.turn])\n    const socket = useContext(SocketContext)\n\n    useEffect(() => {\n        \n    }, [])\n\n\n    const lang = 'en'\n\n    return (\n        <>          \n            <motion.div initial={{top: '-50%', display: 'none'}} animate={animate} className={`${myTurn ? 'border-green-500' : `border-red-500`} absolute z-50 flex-col w-4/6 p-4 -translate-x-1/2 -translate-y-1/2 border-8 shadow-2xl bg-slate-900 left-1/2 gap-6`}>\n                \n\n                <div className=\"flex flex-col md:flex-row mb-2 items-center gap-2\">\n\n                    <CountdownCircleTimer\n                        key={inQuestion}\n                        size={60}\n                        strokeWidth={7}\n                        trailColor=\"rgba(255, 255, 255, 0)\"\n                        isPlaying={inQuestion}\n                        duration={21}\n                        colors={[\"#004777\", \"#F7B801\", \"#A30000\", \"#A30000\"]}\n                        colorsTime={[10, 6, 3, 0]}\n                    >\n                        {renderTime}\n                    </CountdownCircleTimer>\n                    <div className=\"flex-1 text-xl font-black text-center text-white font-jakarta shadow-white uppercase\">Question for { myTurn ? 'you' : whosTurn.name}</div>\n                </div>\n\n                <div className=\"flex flex-col items-center justify-center flex-1 gap-2 p-3 \">\n\n                    <div className=\"text-2xl font-semibold tracking-wide text-center text-white font-jakarta\">\n                        { question[lang]?.question }\n                    </div>\n                </div>\n\n                {\n                    myTurn && \n                    <div className=\"flex flex-row flex-wrap items-center justify-center flex-1 gap-4\">\n                        {\n                            question[lang]?.answers?.map((a, i) => <button \n\n                                key={a.value}\n                                className=\"px-8 py-4 text-2xl md:w-1/4 font-bold bg-white rounded-full font-jakarta hover:scale-110\"\n                                onClick={() => {\n                                    // \n                                    socket.emit('game:set', {\n                                        event: 'GAME_QUESTION_ANSWERED',\n                                        payload: a.correct\n                                    })\n                                    clearTimeout(timerId)\n                                }}\n                                >\n                                    { a.value } \n                                </button>)\n                        }\n                    </div>\n                }\n                {\n                    !myTurn &&\n                        <div className=\"flex flex-row flex-wrap items-center justify-center flex-1 gap-5\">\n                            <svg role=\"status\" className=\"w-8 h-8 mr-2 text-gray-200 animate-spin dark:text-gray-600 fill-white\" viewBox=\"0 0 100 101\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                                <path d=\"M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z\" fill=\"currentColor\"/>\n                                <path d=\"M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z\" fill=\"currentFill\"/>\n                            </svg>\n                            <p className=\"text-slate-400 font-jakarta text-2xl\">waiting for {whosTurn.name} to answer...</p>\n                        </div>\n                }\n\n                \n            </motion.div>            \n        </>\n        \n    )\n}\n\nexport default Question","import { motion } from \"framer-motion\"\nimport { useSelector } from \"react-redux\"\nimport { useContext } from \"react\"\nimport { SocketContext } from \"../../../context/socket\"\n\nimport { Link } from \"react-router-dom\"\n\nimport Piece from \"./Piece\"\n\nconst GameOver = ({animate}) => {\n\n    const socket = useContext(SocketContext)\n    const players = useSelector(state => state.game.players)\n    const podium = useSelector(state => state.game.podium)\n\n    const sup = ['st', 'nd', 'rd', 'th']\n\n    return (\n        <>          \n            <motion.div initial={{top: '-50%', display: 'none'}} animate={animate} className={`absolute z-50 flex-col w-3/4 py-8 -translate-x-1/2 -translate-y-1/2 border-8 shadow-2xl h-4/6 bg-slate-900 left-1/2`}>\n                <div className=\"flex mb-2 m-auto text-white font-jakarta text-3xl md:text-5xl\">\n                🎉 Game Over! 🎉\n                </div>\n\n                <div className=\"flex-1 flex flex-col text-white divide-y\">\n\n                    {   podium.map((place, idx) => (\n                            <div className=\"flex p-4 items-center gap-5 font-jakarta text-lg font-bold\" key={players[place]._id}>\n                                <div className=\"w-7\">{idx+1}<sup>{sup[idx]}</sup></div>\n                                <Piece slot={players[place].slot}/>\n                                <div>{players[place].name}</div>\n                            </div>\n                        ))\n                \n                    }\n\n                </div>\n\n                <Link to='/'>\n                    <div \n                        className=\"justify-center text-white font-bold gap-2 p-3 w-1/2 text-center m-auto bg-green-700 rounded-xl text-lg font-jakarta \"\n                        onClick={() => {\n                            socket.emit('session:set', {\n                                event: 'GAME_LEAVE'\n                            })\n                        }}\n                        >\n                        Back to Home\n                    </div>\n                </Link>\n            </motion.div>            \n        </>\n    )\n}\n\nexport default GameOver","import Transition from \"../Transition\"\nimport Tutorial from \"./components/Tutorial\"\nimport WaitForPlayers from \"./components/WaitForPlayers\"\nimport Stage from \"./components/Stage\"\nimport Side from \"./components/Side\"\nimport Question from \"./components/Question\"\nimport GameOver from \"./components/GameOver\"\n\nimport { useEffect, useContext, useState, useRef } from \"react\"\nimport { SocketContext } from \"../../context/socket\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { sessionSetInGame } from \"../session/sessionSlice\"\nimport { \n    gameSetGame, \n    gameSetMyId,\n    gameDisable,\n    gameEnable,\n    gameSetTurn,\n    gameSetTimerId,\n    gameSetMoving,\n    gameSetPlayer,\n    gameSetInQuestion,\n    gameDim\n} from \"./gameSlice\"\nimport { motion, useAnimation } from \"framer-motion\"\nimport { useNavigate } from \"react-router-dom\"\nimport { BadgeCheckIcon, XCircleIcon } from '@heroicons/react/solid'\n\nconst Game = () => {\n\n    const dispatch = useDispatch()\n    const navigate = useNavigate()\n    const animEventControls = useAnimation()\n    const animQuestionControls = useAnimation()\n    const animBadgeControls = useAnimation()\n    const animGameOverControls = useAnimation()\n\n    const id = useSelector(state => state.session.id)\n\n    const allPlayersReady = useSelector((state) => !state.game.players?.find((player) => player.state === 'tutorial'))\n    const shouldDim = useSelector(state => state.game.isDimmed)\n    const clientPlayer = useSelector((state) => state.game.players?.find((player) => player._id === id))\n    const allPlayers = useSelector((state) => state.game.players)\n    const gameDisabled = useSelector((state) => state.game.disable)\n    const turn = useSelector((state) => state.game.turn)\n    const myTurn = allPlayers[turn]?._id === id \n\n    const socket = useContext(SocketContext)\n\n    const [eventCallout, setEventCallout] = useState('')\n    const [question, setQuestion] = useState({})\n    const [correct, setCorrect] = useState(null)\n\n    let diceRef = useRef(null)\n\n    const popEventCallout = async () => {\n        await animEventControls.start({\n            display: 'flex',\n            opacity: 1,\n            transition: { duration: .25 }\n        })\n        await animEventControls.start({\n            opacity: 0,\n            transition: { delay: .5, duration: .25 }\n        })\n        await animEventControls.start({\n            display: 'none',\n        })\n    }\n\n    const badgeAnimation = async (correct) => {\n        setCorrect(correct)\n        await animBadgeControls.start({\n            display: 'flex',\n            opacity: 1,\n            transition: { duration: .25 }\n        })\n\n        await animBadgeControls.start({\n            opacity: 0,\n            transition: { delay: .5, duration: .25 }\n        })\n\n        await animBadgeControls.start({\n            display: 'none',\n        })\n        setCorrect(null)\n    }\n    \n    // hide on server response\n    const hideQuestion = async () => {\n        await animQuestionControls.start({\n            top: '-50%',\n            transition: { duration: .25, type: 'spring', stiffness: 100 }\n        })\n        await animQuestionControls.start({\n            display: 'none'\n        })\n    }\n    \n    useEffect(() => {\n\n        const popQuestion = async () => {\n            await animQuestionControls.start({\n                display: 'flex',\n                top: '50%',\n                transition: { duration: .25, type: 'spring', stiffness: 100 }\n            })\n    \n            if (!myTurn) return // only emit for current player, other players react from server events\n    \n            // \n            let timerId = setTimeout(async () => {\n                // time out prompt\n                socket.emit(\"game:set\", {\n                    event: 'GAME_QUESTION_UNANSWERED'\n                })\n            }, 21000)\n    \n            dispatch(gameSetTimerId(timerId))\n        }\n\n        dispatch(sessionSetInGame(true))\n        dispatch(gameSetMyId(socket.id))\n\n        // if(inGame){\n        //     \n        // } else {\n        //     \n        // }\n\n        socket.emit('game:fetch', callback => {\n            \n            if (callback.ok) {\n                \n                navigate('/')\n            } else {\n                \n            }\n        })\n\n        socket.on('game:disable', () => {\n            // \n            dispatch(gameDisable())\n        })\n\n        socket.on('game:enable', () => {\n            // \n            dispatch(gameEnable())\n        })\n\n        const nextTurn = () => {\n            socket.emit('validate:okToEmit', (cb) => {\n                if (cb.ok) {\n                    \n                    socket.emit('game:set', { event: 'GAME_NEXT_TURN'  })\n                } else {\n                    \n                }\n            })\n        }\n\n        socket.on('game:update', async data => {\n            switch (data.event) {\n                case 'GAME_PLAYER_READY':\n                    \n                    dispatch(gameSetGame(data.room))\n                    break\n                case 'GAME_DICE_ROLLED':\n                    \n                    diceRef.current.rollAll([data.rolled])\n                    await new Promise(r => setTimeout(r, 2000));\n                    setEventCallout('Rolled ' + data.rolled + '!')\n                    await popEventCallout()\n                    \n                    dispatch(gameSetGame(data.room))\n                    break\n                case 'GAME_MOVE_COMPLETED':\n                    \n                    if (myTurn) {\n                        nextTurn()\n                    }\n                    break\n                case 'GAME_QUESTION':\n                    \n                    setEventCallout('Question!')\n                    // \n                    setQuestion(data.question)\n                    \n                    await popEventCallout()\n                    dispatch(gameSetInQuestion(true))\n                    await popQuestion()\n                    break\n                case 'GAME_QUESTION_ANSWERED_CORRECT':\n                    \n                    await badgeAnimation(true)\n                    await hideQuestion()\n                    // dispatch(gameSetGame(data.room))\n                    if (data.move) {\n                        \n                        dispatch(gameSetPlayer({\n                            number: data.playerNumber,\n                            player: data.player,\n                        }))\n                        // wait for 1 second\n                        await new Promise(r => setTimeout(r, 1000));\n                        \n                    } else {\n                        \n                        // need additional check to check if current state is still the players turn\n                        if (myTurn) {\n                            // \n                            // socket.emit('game:set', { event: 'GAME_NEXT_TURN'  })\n                            nextTurn()\n                        }\n                    }\n\n                    dispatch(gameSetInQuestion(false))\n                    \n                    break\n                case 'GAME_QUESTION_ANSWERED_INCORRECT':\n                case 'GAME_QUESTION_UNANSWERED':\n                    \n                    await badgeAnimation()\n                    await hideQuestion()\n                    if (data.move) {\n                        dispatch(gameSetPlayer({\n                            number: data.playerNumber,\n                            player: data.player,\n                        }))\n                        // wait for 1 second\n                        await new Promise(r => setTimeout(r, 1000));\n                        \n                    } else {\n                        if (myTurn) {\n                            // \n                            // socket.emit('game:set', { event: 'GAME_NEXT_TURN'  })\n                            nextTurn()\n                        }\n                    }\n                    \n                    dispatch(gameSetInQuestion(false))\n                    \n                    break\n                case 'GAME_NEXT_TURN':\n                    \n                    \n                    dispatch(gameSetTurn(data.turn))\n                    \n                    if (allPlayers[data.turn]._id === id) {\n                        setEventCallout('Your turn!')\n                    } else {\n                        setEventCallout(`${allPlayers[data.turn].name}'s turn!`)\n                    }                    \n\n                    await popEventCallout()\n\n                    dispatch(gameSetMoving())\n                    break\n                case 'GAME_OVER':\n                    \n                    dispatch(gameSetGame(data.room))\n                    setEventCallout('Game Over!')\n                    dispatch(gameDim())\n                    await popEventCallout()\n                    await popGameOverWindow()\n                    break\n                case 'PLAYER_DISCONNECTED':\n                    \n                    dispatch(gameSetGame(data.room))\n                    break\n                default:\n                    break\n            }\n        })\n\n        const popGameOverWindow = async () => {\n            await animGameOverControls.start({\n                display: 'flex',\n                top: '50%',\n                transition: { duration: .25, type: 'spring', stiffness: 100 }\n            })\n        }\n\n        return () => {\n            socket.off('game:fetch')\n            socket.off('game:update')\n            socket.off('game:disable')\n            socket.off('game:enable')\n        }\n\n    }, [myTurn])\n\n    useEffect(() => {\n        const unloadCallback = (event) => {\n          event.preventDefault();\n          event.returnValue = \"\";\n          return \"\";\n        };\n      \n        window.addEventListener(\"beforeunload\", unloadCallback);\n        return () => window.removeEventListener(\"beforeunload\", unloadCallback);\n    }, []);\n\n    return (\n        <Transition>\n            { !allPlayersReady && <WaitForPlayers />}\n            { clientPlayer.state === 'tutorial' && <Tutorial />}\n            \n            <Event animate={animEventControls} prompt={eventCallout} />\n            <Badge animate={animBadgeControls} correct={correct} />\n            <Question question={question} animate={animQuestionControls}/>\n            <GameOver animate={animGameOverControls} />\n            <div className={`${!allPlayersReady || gameDisabled ? 'pointer-events-none': ''} flex items-stretch flex-1 flex-grow w-full h-full ${!allPlayersReady || !shouldDim ? 'brightness-50' : ''}`}>\n                <div className={`flex flex-col md:flex-row justify-center w-full border-4 rounded-3xl bg-white`}>\n                    {/* <Side></Side>  */}\n                    <div className=\"flex aspect-square\">\n                        <Stage />\n                    </div> \n                    <Side ref={diceRef}/> \n                </div>\n            </div>\n        </Transition>\n    )\n}\n\nconst Badge = ({animate, correct}) => {\n    return (\n\n        <motion.div\n            animate={animate}\n            initial={{display: 'none'}}\n            className=\"absolute z-[100] flex-col w-32 h-32 rounded-full bg-white -translate-x-1/2 -translate-y-1/2 top-1/2 left-1/2\"\n        >\n            {\n                correct ? <BadgeCheckIcon className=\"text-green-700\" /> : <XCircleIcon className=\"text-red-700\" />\n            }\n            \n        </motion.div>\n    )\n}\n\nconst Event = ({animate, prompt}) => (\n    <motion.div \n        animate={animate} \n        initial={{display: 'none'}} \n        className=\"absolute z-50 flex-col w-3/4 -translate-x-1/2 -translate-y-1/2 top-1/2 left-1/2 bg-white px-4 py-2 border-8 border-black\" >\n        <div className=\"p-4\">\n            <h1 className=\"text-center font-black text-6xl font-jakarta\">{prompt}</h1>\n        </div>\n    </motion.div>\n)\n\nexport default Game"],"names":["children","socket","useContext","SocketContext","useEffect","className","src","alt","onClick","emit","event","role","viewBox","fill","xmlns","d","dispatch","useDispatch","players","useSelector","state","game","myTurn","turn","_id","session","id","gameDisabled","disable","map","player","i","motion","animate","initial","onAnimationComplete","gameIsAnimating","onAnimationStart","Piece","slot","showInGameElements","shift","Side","forwardRef","props","ref","mounted","useRef","current","useMounted","animDiceControls","useAnimation","rolled","events","isAnimating","disableRoll","currentPosition","position","onPodium","filter","p","is_winner","sort","a","b","podium","ranking","ranked","myId","start","rotate","forEach","roll","gameSetMoving","Math","floor","random","validRoll","length","payload","sup","name","numDice","faceColor","outline","dotColor","disabled","renderTime","remainingTime","question","timerId","inQuestion","whosTurn","top","display","size","strokeWidth","trailColor","isPlaying","duration","colors","colorsTime","answers","correct","clearTimeout","value","place","idx","to","Badge","BadgeCheckIcon","XCircleIcon","Event","prompt","navigate","useNavigate","animEventControls","animQuestionControls","animBadgeControls","animGameOverControls","allPlayersReady","find","shouldDim","isDimmed","clientPlayer","allPlayers","useState","eventCallout","setEventCallout","setQuestion","setCorrect","diceRef","popEventCallout","opacity","transition","delay","badgeAnimation","hideQuestion","type","stiffness","popQuestion","setTimeout","gameSetTimerId","sessionSetInGame","gameSetMyId","callback","ok","on","gameDisable","gameEnable","nextTurn","cb","data","gameSetGame","room","rollAll","Promise","r","gameSetInQuestion","move","gameSetPlayer","number","playerNumber","gameSetTurn","gameDim","popGameOverWindow","off","unloadCallback","preventDefault","returnValue","window","addEventListener","removeEventListener","Transition","Stage"],"sourceRoot":""}